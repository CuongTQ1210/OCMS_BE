name: Build and deploy ASP.Net Core app to Azure Web App - ocms

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/workflows/*.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
      
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-
      
      - name: Restore dependencies
        run: dotnet restore ./OCMS_WebAPI_Solution/OCMS_WebAPI_Solution.sln
      
      - name: Run tests
        run: dotnet test ./OCMS_WebAPI_Solution/OCMS_WebAPI_Solution.sln --no-restore --verbosity normal
      
      - name: Security scan with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
      
      - name: Build with dotnet
        run: dotnet build ./OCMS_WebAPI_Solution/OCMS_WebAPI_Solution.sln --configuration Release --no-restore
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      - name: dotnet publish
        run: dotnet publish ./OCMS_WebAPI_Solution/OCMS_WebAPI_Solution.sln -c Release -o "${{env.DOTNET_ROOT}}/myapp" --no-self-contained /p:DebugSymbols=false /p:DebugType=None /p:PublishTrimmed=true /p:ExcludeFilesFromPublish="**\*.xml;**\*.pdb"
      
      - name: Remove unnecessary files
        run: |
          Remove-Item -Path "${{env.DOTNET_ROOT}}/myapp/*.pdb" -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "${{env.DOTNET_ROOT}}/myapp/*.xml" -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "${{env.DOTNET_ROOT}}/myapp/ref" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "${{env.DOTNET_ROOT}}/myapp/*.Tests.dll" -Force -ErrorAction SilentlyContinue
      
      - name: Optimize artifact size
        run: |
          Get-ChildItem -Path "${{env.DOTNET_ROOT}}/myapp" -Filter "*.json" -Recurse | ForEach-Object {
            $content = Get-Content $_.FullName -Raw | ConvertFrom-Json
            $content | ConvertTo-Json -Depth 100 -Compress | Set-Content $_.FullName -Force
          }
          # Log artifact size
          $size = (Get-ChildItem -Path "${{env.DOTNET_ROOT}}/myapp" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          Write-Host "Artifact size: $size MB"
      
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
          retention-days: 5
          compression-level: 9

  deploy-production:
    runs-on: windows-latest
    needs: build
    timeout-minutes: 10
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: .net-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_9539F4CBEEB146DE99A0A866D56B71B7 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_B07DDFD930AD4287BD101A0957068C04 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_FBE1CF4B226B4E5A8B25FF5C1AABC326 }}

      - name: Check disk space before cleanup
        run: |
          $publishProfile = az webapp deployment list-publishing-profiles --resource-group ocms-resourse --name ocms --query "[?publishMethod=='MSDeploy'].{userName:userName,userPWD:userPWD,publishUrl:publishUrl}[0]" | ConvertFrom-Json
          $kuduApiUrl = "https://$($publishProfile.userName):$($publishProfile.userPWD)@ocms-bea4aagveeejawff.scm.southeastasia-01.azurewebsites.net/api"
          $command = "Get-PSDrive -PSProvider FileSystem | Where-Object {$_.Root -eq 'D:\'} | Select-Object Name, Used, Free, @{Name='UsedGB';Expression={$_.Used/1GB}}, @{Name='FreeGB';Expression={$_.Free/1GB}}"
          $commandBytes = [System.Text.Encoding]::UTF8.GetBytes($command)
          $commandBase64 = [Convert]::ToBase64String($commandBytes)
          $response = Invoke-RestMethod -Uri "$kuduApiUrl/command" -Method POST -Body (@{ command = "powershell.exe -EncodedCommand $commandBase64" } | ConvertTo-Json) -ContentType "application/json"
          Write-Host "Disk Space Before Cleanup:"
          Write-Host $response.Output

      - name: Clean up Azure Web App disk space
        run: |
          $publishProfile = az webapp deployment list-publishing-profiles --resource-group ocms-resourse --name ocms --query "[?publishMethod=='MSDeploy'].{userName:userName,userPWD:userPWD,publishUrl:publishUrl}[0]" | ConvertFrom-Json
          $kuduApiUrl = "https://$($publishProfile.userName):$($publishProfile.userPWD)@ocms-bea4aagveeejawff.scm.southeastasia-01.azurewebsites.net/api"
          $command = @"
          try {
            # Log initial disk usage
            Get-PSDrive -PSProvider FileSystem | Where-Object {$_.Root -eq 'D:\'} | Out-String | Write-Output
            # Remove all zip and temp files
            Get-ChildItem -Path D:\local\Temp -Include *.zip,*.tmp -Recurse -File | Remove-Item -Force
            # Remove logs older than 1 day
            Get-ChildItem -Path D:\home\LogFiles -Recurse -File | Where-Object {$_.LastWriteTime -lt (Get-Date).AddDays(-1)} | Remove-Item -Force
            # Remove old deployment artifacts
            Get-ChildItem -Path D:\home\site\deployments -Recurse -File | Remove-Item -Force
            # Clean up old wwwroot files (optional, verify safety)
            # Get-ChildItem -Path D:\home\site\wwwroot -Exclude appsettings.json,web.config | Where-Object {$_.LastWriteTime -lt (Get-Date).AddDays(-7)} | Remove-Item -Recurse -Force
            # Log final disk usage
            Get-PSDrive -PSProvider FileSystem | Where-Object {$_.Root -eq 'D:\'} | Out-String | Write-Output
            Write-Output 'Cleanup completed successfully'
          } catch {
            Write-Output 'Error during cleanup: $_'
            exit 1
          }
          "@
          $commandBytes = [System.Text.Encoding]::UTF8.GetBytes($command)
          $commandBase64 = [Convert]::ToBase64String($commandBytes)
          $response = Invoke-RestMethod -Uri "$kuduApiUrl/command" -Method POST -Body (@{ command = "powershell.exe -EncodedCommand $commandBase64" } | ConvertTo-Json) -ContentType "application/json"
          Write-Host "Cleanup Result:"
          Write-Host $response.Output
          if ($response.Output -notlike '*Cleanup completed successfully*') {
            Write-Host "Cleanup failed. Aborting deployment."
            exit 1
          }

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ocms'
          package: .net-app
        env:
          TEMP: 'D:\a\_temp'
          TMP: 'D:\a\_temp'

      - name: Health check production
        run: |
          $maxRetries = 5
          $retryCount = 0
          $success = $false
          do {
            try {
              $response = Invoke-WebRequest -Uri "${{ steps.deploy-to-webapp.outputs.webapp-url }}/swagger/index.html" -UseBasicParsing -TimeoutSec 30
              if ($response.StatusCode -eq 200) {
                $success = $true
                Write-Host "Health check passed!"
                break
              }
            }
            catch {
              $retryCount++
              Write-Host "Health check failed. Retrying in 10 seconds... ($retryCount/$maxRetries)"
              Write-Host "Error: $($_.Exception.Message)"
              Start-Sleep -Seconds 10
            }
          } while ($retryCount -lt $maxRetries -and -not $success)
          if (-not $success) {
            Write-Host "Health check failed after $maxRetries attempts. Deployment may have issues."
            exit 1
          }
      
      - name: Log deployment status
        if: always()
        run: |
          echo "============== DEPLOYMENT STATUS SUMMARY =============="
          echo "Status: ${{ job.status }}"
          echo "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          echo "Environment: Production"
          echo "Application: ocms"
          echo "Deployed URL: ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Commit: ${{ github.sha }}"
          echo "======================================================"
      
      - name: Report disk space usage
        if: always()
        run: |
          $publishProfile = az webapp deployment list-publishing-profiles --resource-group ocms-resourse --name ocms --query "[?publishMethod=='MSDeploy'].{userName:userName,userPWD:userPWD,publishUrl:publishUrl}[0]" | ConvertFrom-Json
          $kuduApiUrl = "https://$($publishProfile.userName):$($publishProfile.userPWD)@ocms-bea4aagveeejawff.scm.southeastasia-01.azurewebsites.net/api"
          $command = "Get-PSDrive -PSProvider FileSystem | Where-Object {$_.Root -eq 'D:\'} | Select-Object Name, Used, Free, @{Name='UsedGB';Expression={$_.Used/1GB}}, @{Name='FreeGB';Expression={$_.Free/1GB}}"
          $commandBytes = [System.Text.Encoding]::UTF8.GetBytes($command)
          $commandBase64 = [Convert]::ToBase64String($commandBytes)
          try {
            $response = Invoke-RestMethod -Uri "$kuduApiUrl/command" -Method POST -Body (@{ command = "powershell.exe -EncodedCommand $commandBase64" } | ConvertTo-Json) -ContentType "application/json" -ErrorAction Stop
            Write-Host "Disk Space Report:"
            Write-Host $response.Output
          }
          catch {
            Write-Host "Failed to get disk space report: $_"
          }