// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OCMS_BOs;

#nullable disable

namespace OCMS_BOs.Migrations
{
    [DbContext(typeof(OCMSDbContext))]
    [Migration("20250505232538_testfxinewtable")]
    partial class testfxinewtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OCMS_BOs.Entities.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Candidate", b =>
                {
                    b.Property<string>("CandidateId")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CandidateStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImportByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImportRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PersonalID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecialtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CandidateId");

                    b.HasIndex("ImportRequestId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Certificate", b =>
                {
                    b.Property<string>("CertificateId")
                        .HasColumnType("text");

                    b.Property<string>("ApprovebyUserId")
                        .HasColumnType("text");

                    b.Property<string>("CertificateCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CertificateTemplateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CertificateURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IncludesRelearn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("IssueByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RelearnSubjects")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevocationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("SignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SpecialtyId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CertificateId");

                    b.HasIndex("ApprovebyUserId");

                    b.HasIndex("CertificateTemplateId");

                    b.HasIndex("CourseId");

                    b.HasIndex("IssueByUserId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.CertificateTemplate", b =>
                {
                    b.Property<string>("CertificateTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TemplateFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("templateStatus")
                        .HasColumnType("integer");

                    b.HasKey("CertificateTemplateId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("CertificateTemplates");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApproveByUserId")
                        .HasColumnType("text");

                    b.Property<int>("CourseLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedCourseId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TrainingPlanId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CourseId");

                    b.HasIndex("ApproveByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RelatedCourseId");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.CourseSubjectSpecialty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourseId1")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("SpecialtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectId1")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubjectId1");

                    b.ToTable("CourseSubjectSpecialties");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Decision", b =>
                {
                    b.Property<string>("DecisionId")
                        .HasColumnType("text");

                    b.Property<string>("CertificateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DecisionCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("DecisionStatus")
                        .HasColumnType("integer");

                    b.Property<string>("DecisionTemplateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IssuedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DecisionId");

                    b.HasIndex("CertificateId");

                    b.HasIndex("DecisionTemplateId");

                    b.HasIndex("IssuedByUserId");

                    b.ToTable("Decisions");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.DecisionTemplate", b =>
                {
                    b.Property<string>("DecisionTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TemplateStatus")
                        .HasColumnType("integer");

                    b.HasKey("DecisionTemplateId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("DecisionTemplate");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManagerUserId")
                        .HasColumnType("text");

                    b.Property<string>("SpecialtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DepartmentId");

                    b.HasIndex("ManagerUserId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.ExternalCertificate", b =>
                {
                    b.Property<int>("ExternalCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExternalCertificateId"));

                    b.Property<string>("CandidateId")
                        .HasColumnType("text");

                    b.Property<string>("CertificateCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CertificateFileURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IssuingOrganization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("integer");

                    b.Property<string>("VerifyByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("VerifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ExternalCertificateId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalCertificates");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Grade", b =>
                {
                    b.Property<string>("GradeId")
                        .HasColumnType("text");

                    b.Property<double>("AssignmentScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("FinalExamScore")
                        .HasColumnType("double precision");

                    b.Property<double?>("FinalResitScore")
                        .HasColumnType("double precision");

                    b.Property<string>("GradedByInstructorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ParticipantScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalScore")
                        .HasColumnType("double precision");

                    b.Property<string>("TraineeAssignID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("gradeStatus")
                        .HasColumnType("integer");

                    b.HasKey("GradeId");

                    b.HasIndex("GradedByInstructorId");

                    b.HasIndex("TraineeAssignID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.InstructorAssignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .HasColumnType("text");

                    b.Property<string>("AssignByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CourseSubjectSpecialtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("integer");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignByUserId");

                    b.HasIndex("CourseSubjectSpecialtyId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorAssignments");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GenerateByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("GenerateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReportType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ReportId");

                    b.HasIndex("GenerateByUserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Request", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<string>("ApproveByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestEntityId")
                        .HasColumnType("text");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer");

                    b.Property<string>("RequestUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RequestId");

                    b.HasIndex("ApproveByUserId");

                    b.HasIndex("RequestUserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "HeadMaster"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Training staff"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "HR"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "Instructor"
                        },
                        new
                        {
                            RoleId = 6,
                            RoleName = "Reviewer"
                        },
                        new
                        {
                            RoleId = 7,
                            RoleName = "Trainee"
                        },
                        new
                        {
                            RoleId = 8,
                            RoleName = "AOC Manager"
                        });
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Specialties", b =>
                {
                    b.Property<string>("SpecialtyId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ParentSpecialtyId")
                        .HasColumnType("text");

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("SpecialtyId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ParentSpecialtyId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            SpecialtyId = "SPEC-001",
                            CreatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 98, DateTimeKind.Utc).AddTicks(9320),
                            CreatedByUserId = "ADM-1",
                            Description = "Admin Specialty Description",
                            SpecialtyName = "Admin Specialty",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 6, 6, 25, 38, 98, DateTimeKind.Local).AddTicks(9318)
                        });
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.Property<string>("CreateByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PassingScore")
                        .HasColumnType("double precision");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SubjectId");

                    b.HasIndex("CreateByUserId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.TraineeAssign", b =>
                {
                    b.Property<string>("TraineeAssignId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApproveByUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CourseSubjectSpecialtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TraineeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TraineeAssignId");

                    b.HasIndex("ApproveByUserId");

                    b.HasIndex("AssignByUserId");

                    b.HasIndex("CourseSubjectSpecialtyId");

                    b.HasIndex("RequestId");

                    b.HasIndex("TraineeId");

                    b.ToTable("TraineeAssignments");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.TrainingPlan", b =>
                {
                    b.Property<string>("PlanId")
                        .HasColumnType("text");

                    b.Property<string>("ApproveByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desciption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecialtiesSpecialtyId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TrainingPlanStatus")
                        .HasColumnType("integer");

                    b.HasKey("PlanId");

                    b.HasIndex("ApproveByUserId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("SpecialtiesSpecialtyId");

                    b.ToTable("TrainingPlans");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.TrainingSchedule", b =>
                {
                    b.Property<string>("ScheduleID")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("ClassTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("CourseSubjectSpecialtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int[]>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InstructorID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("SubjectPeriod")
                        .HasColumnType("interval");

                    b.HasKey("ScheduleID");

                    b.HasIndex("CourseSubjectSpecialtyId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InstructorID");

                    b.ToTable("TrainingSchedules");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAssign")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialtyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "ADM-1",
                            Address = "123 Admin Street",
                            AvatarUrl = "",
                            CreatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8566),
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FullName = "Admin User",
                            Gender = "Other",
                            IsAssign = false,
                            PasswordHash = "$2a$11$yO/mviTurs3KkKhRUgbMm.A1vq1vCvBYnybamzXti.DD/WwPJmfHC",
                            PhoneNumber = "1234567890",
                            RoleId = 1,
                            SpecialtyId = "SPEC-001",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8566),
                            Username = "Admin"
                        },
                        new
                        {
                            UserId = "HM-1",
                            Address = "456 Headmaster Street",
                            AvatarUrl = "",
                            CreatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8572),
                            DateOfBirth = new DateTime(1980, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "headmaster@gmail.com",
                            FullName = "Head Master User",
                            Gender = "Male",
                            IsAssign = false,
                            PasswordHash = "$2a$11$4OTAKFNPK.LqtH.COzxD1e/eGKEfnwE0/SMElP6ucUyISQKvAlg6O",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            SpecialtyId = "SPEC-001",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8573),
                            Username = "HeadMaster"
                        },
                        new
                        {
                            UserId = "TS-1",
                            Address = "789 Training Staff Lane",
                            AvatarUrl = "",
                            CreatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8576),
                            DateOfBirth = new DateTime(1992, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainingstaff@gmail.com",
                            FullName = "Training Staff User",
                            Gender = "Female",
                            IsAssign = false,
                            PasswordHash = "$2a$11$4OTAKFNPK.LqtH.COzxD1e/eGKEfnwE0/SMElP6ucUyISQKvAlg6O",
                            PhoneNumber = "1122334455",
                            RoleId = 3,
                            SpecialtyId = "SPEC-001",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8576),
                            Username = "TrainingStaff"
                        },
                        new
                        {
                            UserId = "HR-1",
                            Address = "101 HR Street",
                            AvatarUrl = "",
                            CreatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8579),
                            DateOfBirth = new DateTime(1985, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hrmanager@gmail.com",
                            FullName = "HR Manager",
                            Gender = "Male",
                            IsAssign = false,
                            PasswordHash = "$2a$11$4OTAKFNPK.LqtH.COzxD1e/eGKEfnwE0/SMElP6ucUyISQKvAlg6O",
                            PhoneNumber = "2233445566",
                            RoleId = 4,
                            SpecialtyId = "SPEC-001",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8579),
                            Username = "HRManager"
                        },
                        new
                        {
                            UserId = "INST-1",
                            Address = "202 Instructor Avenue",
                            AvatarUrl = "",
                            CreatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8582),
                            DateOfBirth = new DateTime(1990, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "instructor@gmail.com",
                            FullName = "Instructor User",
                            Gender = "Female",
                            IsAssign = false,
                            PasswordHash = "$2a$11$4OTAKFNPK.LqtH.COzxD1e/eGKEfnwE0/SMElP6ucUyISQKvAlg6O",
                            PhoneNumber = "3344556677",
                            RoleId = 5,
                            SpecialtyId = "SPEC-001",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8582),
                            Username = "Instructor"
                        },
                        new
                        {
                            UserId = "REV-1",
                            Address = "303 Reviewer Blvd",
                            AvatarUrl = "",
                            CreatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8584),
                            DateOfBirth = new DateTime(1993, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "reviewer@gmail.com",
                            FullName = "Reviewer User",
                            Gender = "Male",
                            IsAssign = false,
                            PasswordHash = "$2a$11$4OTAKFNPK.LqtH.COzxD1e/eGKEfnwE0/SMElP6ucUyISQKvAlg6O",
                            PhoneNumber = "4455667788",
                            RoleId = 6,
                            SpecialtyId = "SPEC-001",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8585),
                            Username = "Reviewer"
                        },
                        new
                        {
                            UserId = "TR-1",
                            Address = "404 Trainee Lane",
                            AvatarUrl = "",
                            CreatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8587),
                            DateOfBirth = new DateTime(2002, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainee@gmail.com",
                            FullName = "Trainee User",
                            Gender = "Female",
                            IsAssign = false,
                            PasswordHash = "$2a$11$4OTAKFNPK.LqtH.COzxD1e/eGKEfnwE0/SMElP6ucUyISQKvAlg6O",
                            PhoneNumber = "5566778899",
                            RoleId = 7,
                            SpecialtyId = "SPEC-001",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8588),
                            Username = "Trainee"
                        },
                        new
                        {
                            UserId = "AOC-1",
                            Address = "505 AOC Street",
                            AvatarUrl = "",
                            CreatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8590),
                            DateOfBirth = new DateTime(1975, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aocmanager@gmail.com",
                            FullName = "AOC Manager User",
                            Gender = "Male",
                            IsAssign = false,
                            PasswordHash = "$2a$11$4OTAKFNPK.LqtH.COzxD1e/eGKEfnwE0/SMElP6ucUyISQKvAlg6O",
                            PhoneNumber = "6677889900",
                            RoleId = 8,
                            SpecialtyId = "SPEC-001",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 5, 5, 23, 25, 38, 464, DateTimeKind.Utc).AddTicks(8590),
                            Username = "AOCManager"
                        });
                });

            modelBuilder.Entity("OCMS_BOs.Entities.AuditLog", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Candidate", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.Request", "ImportRequest")
                        .WithMany()
                        .HasForeignKey("ImportRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Specialties", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportRequest");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Certificate", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "ApprovebyUser")
                        .WithMany()
                        .HasForeignKey("ApprovebyUserId");

                    b.HasOne("OCMS_BOs.Entities.CertificateTemplate", "CertificateTemplate")
                        .WithMany()
                        .HasForeignKey("CertificateTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.User", "IssueByUser")
                        .WithMany()
                        .HasForeignKey("IssueByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Specialties", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId");

                    b.HasOne("OCMS_BOs.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovebyUser");

                    b.Navigation("CertificateTemplate");

                    b.Navigation("Course");

                    b.Navigation("IssueByUser");

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.CertificateTemplate", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("OCMS_BOs.Entities.User", "CreateByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CreateByUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Course", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "ApproveByUser")
                        .WithMany()
                        .HasForeignKey("ApproveByUserId");

                    b.HasOne("OCMS_BOs.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Course", "RelatedCourse")
                        .WithMany("RelatedCourses")
                        .HasForeignKey("RelatedCourseId");

                    b.HasOne("OCMS_BOs.Entities.TrainingPlan", "TrainingPlan")
                        .WithMany("Courses")
                        .HasForeignKey("TrainingPlanId");

                    b.Navigation("ApproveByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("RelatedCourse");

                    b.Navigation("TrainingPlan");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.CourseSubjectSpecialty", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Course", null)
                        .WithMany("CourseSubjectSpecialties")
                        .HasForeignKey("CourseId1");

                    b.HasOne("OCMS_BOs.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Specialties", "Specialty")
                        .WithMany("CourseSubjectSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Subject", null)
                        .WithMany("CourseSubjectSpecialties")
                        .HasForeignKey("SubjectId1");

                    b.Navigation("Course");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Specialty");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Decision", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.DecisionTemplate", "DecisionTemplate")
                        .WithMany()
                        .HasForeignKey("DecisionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.User", "IssuedByUser")
                        .WithMany()
                        .HasForeignKey("IssuedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("DecisionTemplate");

                    b.Navigation("IssuedByUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.DecisionTemplate", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("OCMS_BOs.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Department", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCMS_BOs.Entities.Specialties", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.ExternalCertificate", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.Candidate", "Candidate")
                        .WithMany("ExternalCertificate")
                        .HasForeignKey("CandidateId");

                    b.HasOne("OCMS_BOs.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Candidate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Grade", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "GradedByInstructor")
                        .WithMany()
                        .HasForeignKey("GradedByInstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.TraineeAssign", "TraineeAssign")
                        .WithMany()
                        .HasForeignKey("TraineeAssignID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GradedByInstructor");

                    b.Navigation("TraineeAssign");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.InstructorAssignment", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "AssignByUser")
                        .WithMany()
                        .HasForeignKey("AssignByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.CourseSubjectSpecialty", "CourseSubjectSpecialty")
                        .WithMany("Instructors")
                        .HasForeignKey("CourseSubjectSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignByUser");

                    b.Navigation("CourseSubjectSpecialty");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Notification", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Report", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "GenerateByUser")
                        .WithMany()
                        .HasForeignKey("GenerateByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenerateByUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Request", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "ApproveBy")
                        .WithMany()
                        .HasForeignKey("ApproveByUserId");

                    b.HasOne("OCMS_BOs.Entities.User", "RequestUser")
                        .WithMany()
                        .HasForeignKey("RequestUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproveBy");

                    b.Navigation("RequestUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Specialties", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCMS_BOs.Entities.Specialties", "ParentSpecialty")
                        .WithMany("SubSpecialties")
                        .HasForeignKey("ParentSpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCMS_BOs.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ParentSpecialty");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Subject", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "CreateByUser")
                        .WithMany()
                        .HasForeignKey("CreateByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateByUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.TraineeAssign", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "ApproveByUser")
                        .WithMany()
                        .HasForeignKey("ApproveByUserId");

                    b.HasOne("OCMS_BOs.Entities.User", "AssignByUser")
                        .WithMany()
                        .HasForeignKey("AssignByUserId");

                    b.HasOne("OCMS_BOs.Entities.CourseSubjectSpecialty", "CourseSubjectSpecialty")
                        .WithMany("Trainees")
                        .HasForeignKey("CourseSubjectSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.User", "Trainee")
                        .WithMany()
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproveByUser");

                    b.Navigation("AssignByUser");

                    b.Navigation("CourseSubjectSpecialty");

                    b.Navigation("Request");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.TrainingPlan", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "ApproveByUser")
                        .WithMany()
                        .HasForeignKey("ApproveByUserId");

                    b.HasOne("OCMS_BOs.Entities.User", "CreateByUser")
                        .WithMany()
                        .HasForeignKey("CreateByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Specialties", null)
                        .WithMany("TrainingPlans")
                        .HasForeignKey("SpecialtiesSpecialtyId");

                    b.Navigation("ApproveByUser");

                    b.Navigation("CreateByUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.TrainingSchedule", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.CourseSubjectSpecialty", "CourseSubjectSpecialty")
                        .WithMany("Schedules")
                        .HasForeignKey("CourseSubjectSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseSubjectSpecialty");

                    b.Navigation("CreatedBy");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.User", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCMS_BOs.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Specialties", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Candidate", b =>
                {
                    b.Navigation("ExternalCertificate");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Course", b =>
                {
                    b.Navigation("CourseSubjectSpecialties");

                    b.Navigation("RelatedCourses");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.CourseSubjectSpecialty", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Schedules");

                    b.Navigation("Trainees");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Specialties", b =>
                {
                    b.Navigation("CourseSubjectSpecialties");

                    b.Navigation("SubSpecialties");

                    b.Navigation("TrainingPlans");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Subject", b =>
                {
                    b.Navigation("CourseSubjectSpecialties");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.TrainingPlan", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
