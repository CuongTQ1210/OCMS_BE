// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OCMS_BOs;

#nullable disable

namespace OCMS_BOs.Migrations
{
    [DbContext(typeof(OCMSDbContext))]
    partial class OCMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OCMS_BOs.Entities.ApprovalLog", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApprovalId"));

                    b.Property<string>("ActionDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApprovedUserUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestedUserUserId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ApprovalId");

                    b.HasIndex("ApprovedUserUserId");

                    b.HasIndex("RequestedUserUserId");

                    b.ToTable("ApprovalLogs", (string)null);
                });

            modelBuilder.Entity("OCMS_BOs.Entities.BackupLog", b =>
                {
                    b.Property<int>("BackupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BackupId"));

                    b.Property<string>("BackupFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("BackupTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BackupId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("BackupLogs", (string)null);
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserUserId")
                        .HasColumnType("text");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CourseId");

                    b.HasIndex("CreatedByUserUserId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("OCMS_BOs.Entities.CourseChangeRequest", b =>
                {
                    b.Property<string>("ChangeRequestId")
                        .HasColumnType("text");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("integer");

                    b.Property<string>("ApprovedUserUserId")
                        .HasColumnType("text");

                    b.Property<string>("ChangeDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestedUserUserId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ChangeRequestId");

                    b.HasIndex("ApprovedUserUserId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequestedUserUserId");

                    b.ToTable("CourseChangeRequests", (string)null);
                });

            modelBuilder.Entity("OCMS_BOs.Entities.CourseParticipant", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GradeId")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ParticipantId");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseParticipants", (string)null);
                });

            modelBuilder.Entity("OCMS_BOs.Entities.ExternalCertificate", b =>
                {
                    b.Property<int>("ExternalCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExternalCertificateId"));

                    b.Property<string>("CertificateFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExternalCertificateId");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalCertificates", (string)null);
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Grade", b =>
                {
                    b.Property<string>("GradeId")
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GradeValue")
                        .HasColumnType("integer");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TraineeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("GradeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubmittedBy");

                    b.HasIndex("TraineeId");

                    b.ToTable("Grades", (string)null);
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "HeadMaster"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Training staff"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "HR"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "Instructor"
                        },
                        new
                        {
                            RoleId = 6,
                            RoleName = "Reviewer"
                        },
                        new
                        {
                            RoleId = 7,
                            RoleName = "Trainee"
                        });
                });

            modelBuilder.Entity("OCMS_BOs.Entities.TraineeNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("TraineeNotifications", (string)null);
                });

            modelBuilder.Entity("OCMS_BOs.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ADM-1",
                            CreatedAt = new DateTime(2025, 2, 20, 16, 0, 32, 959, DateTimeKind.Utc).AddTicks(2795),
                            Email = "admin@gmail.com",
                            IsDeleted = false,
                            PasswordHash = "$2a$11$jcT9x56EggffsZtByPdFSOsaKlY0AQqg1VleR0reBD/nS4Bj84/k2",
                            RoleId = 1,
                            Status = "active",
                            UpdatedAt = new DateTime(2025, 2, 20, 16, 0, 32, 959, DateTimeKind.Utc).AddTicks(2791),
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("OCMS_BOs.Entities.ApprovalLog", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "ApprovedUser")
                        .WithMany()
                        .HasForeignKey("ApprovedUserUserId");

                    b.HasOne("OCMS_BOs.Entities.User", "RequestedUser")
                        .WithMany()
                        .HasForeignKey("RequestedUserUserId");

                    b.Navigation("ApprovedUser");

                    b.Navigation("RequestedUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.BackupLog", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Course", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserUserId");

                    b.HasOne("OCMS_BOs.Entities.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.CourseChangeRequest", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "ApprovedUser")
                        .WithMany()
                        .HasForeignKey("ApprovedUserUserId");

                    b.HasOne("OCMS_BOs.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.User", "RequestedUser")
                        .WithMany()
                        .HasForeignKey("RequestedUserUserId");

                    b.Navigation("ApprovedUser");

                    b.Navigation("Course");

                    b.Navigation("RequestedUser");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.CourseParticipant", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("OCMS_BOs.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.ExternalCertificate", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.Grade", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("SubmittedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS_BOs.Entities.User", "Trainee")
                        .WithMany()
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.TraineeNotification", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCMS_BOs.Entities.User", b =>
                {
                    b.HasOne("OCMS_BOs.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
